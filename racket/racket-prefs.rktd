(
 (readline-input-history
  (
   #"(split-path \"/\")"
   #"(split-path \"bar/\")"
   #"(split-path \"/../../foo\")"
   #"(split-path \"foo/\")"
   #"(split-path \"foo\")"
   #"(split-path \"/foo\")"
   #"(split-path \"/\")"
   #"(split-path \"foo/bar/baz\")"
   #"(split-path \"/foo/bar/baz\")"
   #"(split-path \"foo/bar\")"
   #"(split-path \"/foo/bar\")"
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #"(everything)"
   #",enter \"linklet-main.rkt\""
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #"(current-directory)"
   #",enter \"compiler/linklet-api.rkt\""
   #"(current-directory)"
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #",enter \"assembler.rkt\""
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #",enter \"assembler.rkt\""
   #",enter \"linklet-api.rkt\""
   #"(eq? +nan.f +nan.0)"
   #"(equal? +nan.f +nan.0)"
   #"(equal? +nan.f)"
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #",enter \"assembler.rkt\""
   #"snd"
   #"+inf.0"
   #"(number? x)"
   #"(eq? +inf.0 x)"
   #"(eq? x x)"
   #"(define x +inf.0)"
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #",enter \"assembler.rkt\""
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #",enter \"assembler.rkt\""
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #",enter \"assembler.rkt\""
   #",enter \"linklet-api.rkt\""
   #"(eq? +inf.0 +inf.0)"
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #",enter \"assembler.rkt\""
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #",enter \"assembler.rkt\""
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #",enter \"assembler.rkt\""
   #"(get-output-string str)"
   #"(assemble-linklet snd str)"
   #"(define str (open-output-string))"
   #"snd"
   #"(define snd (absyn-linklet->il fst))"
   #"fst"
   #"(define fst (parse-linklet x \"/home/gamburgm/racketscript/random.rkt\"))"
   #"x"
   #"(define x (read (open-input-file \"../../../random.rktl\")))"
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #",bt"
   #"(match x [`(linklet ,foo ,bar . ,g) g])"
   #"(require \"match.rkt\")"
   #"x"
   #"(define x (read (open-input-file \"../../../random.rktl\")))"
   #"(define x (read (open-input-file \"random.rktl\")))"
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #",enter \"sexp-to-ast.rkt\""
   #",enter \"linklet-api.rkt\""
   #",bt"
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #"(everything)"
   #",enter \"linklet-api.rkt\""
   #"(everything x)"
   #"x"
   #"(define x (read (open-input-file \"../../../racketscript.rktl\")))"
   #",enter \"linklet-api.rkt\""
   #"(substring boo 0 20)"
   #"(define boo (everything x))"
   #"(everything x)"
   #"(define x (read (open-input-file \"../../../expander.rktl\")))"
   #",enter \"linklet-api.rkt\""
   #"(everything x)"
   #"(define x (read (open-input-file \"../../../expander.rktl\")))"
   #",enter \"linklet-api.rkt\""
   #"(format \"./~a\" 'foo)"
   #"(~a \"./\" 'foo)"
   #"(split-at-right '(1 2 3) 1)"
   #"(path-only (car (explode-path x)))"
   #"(explode-path x)"
   #"x"
   #"(define x (simple-form-path (build-path \"foobar.rkt\")))"
   #"(simple-form-path (build-path \"foobar.rkt\"))"
   #"(simplify-form-path (build-path \"foobar.rkt\"))"
   #"(require racket/path)"
   #",enter \"racketscript-compiler/racketscript/compiler/util.rkt\""
   #"(simplify-form-path (build-path \"foobar.rkt\"))"
   #"(require racket/path)"
   #"(split-path (build-path \"home\" \"gamburgm\" \"foobar.rkt\"))"
   #"(split-path (path->directory-path (build-path \"a\" \"g\")))"
   #"(split-path (build-path \"a\" \"g\"))"
   #"(split-path (build-path \"a\" \"g.rkt\"))"
   #"(split-path (build-path 'up \"main.rkt\"))"
   #"(split-path (build-path \"..\" \"main.rkt\"))"
   #"(split-path (build-path \"foo\" \"main.rkt\"))"
   #"(split-path (build-path \"main.rkt\"))"
   #"(path->directory-path (build-path \"main.rkt\"))"
   #",enter \"racketscript-compiler/racketscript/compiler/util.rkt\""
   #"(get-root-links x)"
   #",enter \"racketscript-compiler/racketscript/compiler/util-untyped.rkt\""
   #"(get-root-links x)"
   #",enter \"racketscript-compiler/racketscript/compiler/util-untyped.rkt\""
   #"(get-root-links x)"
   #"(links #:file x #:root? #t)"
   #"(links #:links-file x #:root? #t)"
   #"x"
   #"(define x (cadr (current-library-collection-links)))"
   #"(current-library-collection-links)"
   #"(current-collection-path-links)"
   #"x"
   #",enter \"racketscript-compiler/racketscript/compiler/util-untyped.rkt\""
   #"(current-library-collection-paths)"
   #"(apply build-path base \"collects\" (map bytes->string/locale (cadr z)))"
   #"(apply build-path base (map bytes->string/locale (cadr z)))"
   #"(build-path base (bytes->string/locale (car (cadr z))) (bytes->string/locale\n                                                        (cadr (cadr z))))"
   #"(build-path base (bytes->string (car (cadr z))) (bytes->string (cadr (cadr z))))"
   #"(build-path base (car (cadr z)) (cadr (cadr z)))"
   #"base"
   #"x"
   #"(define-values (base a b) (split-path (car x)))"
   #"(split-path (car x))"
   #"(split-path x)"
   #"(cadr z)"
   #"(cdr z)"
   #"z"
   #"(define z (car (cdr (cdr (cdr (cdr (cdr y)))))))"
   #"y"
   #"(define y (read (open-input-file (car x))))"
   #"x"
   #"(collection-file-path \"pkgs\" \"scribble-text-lib\")"
   #"(current-library-collection-paths)"
   #"(read (open-input-file (cadr x)))"
   #"(read (open-input-file (cad\n                        r x)))"
   #"(read (open-input-file (car x)))"
   #"x"
   #"(define x (cdr x))"
   #"x"
   #"(define x (current-library-collection-links))"
   #"(current-library-collection-links)"
   #"(find-links-file)"
   #"(find-system-path 'collects-dir)"
   #"(find-system-path 'sys-dir)"
   #"(find-system-path 'addon-dir)"
   #"(find-system-path 'host-config-dir)"
   #"(find-system-path 'init-file)"
   #"(find-system-path 'config-dir)"
   #"(find-system-path 'exec-file\n                  )"
   #"(find-system-path 'home-dir)"
   #"(find-links-file)"
   #"(require racket/dirs)"
   #"(require setup/dirs)"
   #"(require racket/dirs)"
   #"(find-links-file)"
   #",enter \"racketscript-compiler/racketscript/compiler/util-untyped.rkt\""
   #"(links #:file (find-links-file) #:root? #t)"
   #"(current-library-collection-links)"
   #"(find-links-file)"
   #",enter \"racketscript-compiler/racketscript/compiler/util-untyped.rkt\""
   #"(match '(1 2 3) [`(,x . ,y) #:when (eq? x 1) y] [`,e 3])"
   #"(match '(1 2 3) [`(,x . ,y) #:when (eq? x 9) y] [`,e 3])"
   #",enter \"racketscript-compiler/racketscript/compiler/match.rkt\""
   #"(match '(1 2 3) [`(,x . ,y) #:when (eq? x 9) y] [`,e 3])"
   #",enter \"racketscript-compiler/racketscript/compiler/match.rkt\""
   #"(match '(1 2 3) [`(,x . ,y) #:when (eq? x 9) y] [`,e 3])"
   #",enter \"racketscript-compiler/racketscript/compiler/match.rkt\""
   #"(find-links-file)"
   #"(require setup/dirs)"
   #",enter \"racketscript-compiler/racketscript/compiler/util-untyped.rkt\""
   #",enter \"racketscript-compiler/racketscript/compiler/ident.rkt\""
   #"(parameterize ([test-environment? #t]\n                   [fresh-id-counter 0])\n     (list (fresh-id 'foo)\n               (fresh-id-counter)))"
   #",enter \"racketscript-compiler/racketscript/compiler/ident.rkt\""
   #",bt"
   #"(parameterize ([test-environment? #t]\n                   [fresh-id-counter 0])\n     (list (fresh-id 'foo)\n               (fresh-id-counter)))"
   #"(valid-literal-atom? #\\3 #t)"
   #"(valid-literal-atom? #\\a #f)"
   #"(normalize-symbol 'document.write (list \".\"))"
   #"(normalize-symbol 'document.write+print (list \".\" \"+\"))"
   #"(normalize-symbol '7am)"
   #",enter \"racketscript-compiler/racketscript/compiler/ident.rkt\""
   #"(~a \"g\" \"r\")"
   #"(require racket/format)"
   #"(~a \"g\" \"r\")"
   #",enter \"racketscript-compiler/racketscript/compiler/ident.rkt\""
   #"(list->set '(1 2 3 4 5))"
   #"y"
   #"(define y (set-add x 9))"
   #"(define y (set-add 9)\n  )"
   #"(set-add x 9)"
   #"(set-member? x 6)"
   #"(set-member? x 5)"
   #"(define x (set 1 2 3 4 5))"
   #",enter \"racketscript-compiler/racketscript/compiler/set.rkt\""
   #",enter \"racketscript-compiler/racketscript/compiler/ident.rkt\""
   #"(~a \"f\" \"a\")"
   #"(require racket/format)"
   #"(~a \"f\" \"a\")"
   #",enter \"racketscript-compiler/racketscript/compiler/ident.rkt\""
   #"(match '(1 2 3)\n  [`(,x . ,y) #:when (boolean? x) y]\n  [`(,x . ,y) x])"
   #",enter \"racketscript-compiler/racketscript/compiler/match.rkt\""
   #"(match '(1 2 3)\n  [`(,x . ,y) #:when (boolean? x) y]\n  [`(,x . ,y) x])"
   #"(match '(1 2 3)\n  [(,x . ,y) #:when (boolean? x) y]\n  [(,x . ,y) x])"
   #",enter \"racketscript-compiler/racketscript/compiler/match.rkt\""
   #"(eq? \"-\" \"-\")"
   #",bt"
   #"(match-define `(,a ,b ,c) (cons 3 4))"
   #"d"
   #"a"
   #"(match-define `(,a . ,d) (cons 3 5))"
   #",enter \"racketscript-compiler/racketscript/compiler/match.rkt\""
   #"ignored-undefined-identifiers"
   #"primitive-modules"
   #"(output-directory)"
   #"output-directory"
   #",en \"racketscript-compiler/racketscript/compiler/config.rkt\""
   #"(require \"racketscript-compiler/racketscript/compiler/config.rkt\")"
   #"(set-member? x 6)"
   #"(set-member? x 3)"
   #"x"
   #"(define x (set 3 4 5))"
   #"(set 3 4 5)"
   #"(require \"racketscript-compiler/racketscript/compiler/set.rkt\")"
   #"(set 3 4 5)"
   #"(require \"racketscript-compiler/racketscript/compiler/set.rkt\")"
   #"(set 3 4 5)"
   #"(require \"racketscript-compiler/racketscript/compiler/set.rkt\")"
   #"(define x (set 3 4 5))"
   #"x"
   #"(define x (set 3 4 5))"
  ))
)
