(
 (readline-input-history
  (
   #"(hash-ref h 5)"
   #"h"
   #"(hash-set! h 5 'hello)"
   #"(define new-h (hash-set h 5 'hello))"
   #"(define h (make-weak-hash))"
   #"(x 5)"
   #"(define x (const 3))"
   #"(const 3)"
   #"const"
   #"(ast-node? (imm-id '() 'x))"
   #"(ast-node? (ast-id '() 'x))"
   #"(anf-node? (imm-id '() 'x))"
   #"(anf-node? (ast-int '() 5))"
   #"(ast-node? (ast-int '() 5))"
   #"(require \"types.rkt\")"
   #"(foldr 'list 0 '())"
   #"(foldr list 0 10)"
   #"(factorial 3)"
   #"(fact 4)"
   #"(* 5 (string->number x))"
   #"(string->number x)"
   #"(define x \"-1\")"
   #"(define foobar (hash 3 (values 2 5)))"
   #"(modulo -2 10)"
   #"(modulo 4 3)"
   #"(modulo 2 3)"
   #"(modulo -2 3)"
   #"(modulo 3 -2)"
   #"(+ -35)"
   #"(in-hash (hash 3 54))"
   #"(in-hash (hassh 3 5))"
   #"(printf \"~a\" \"[\")"
   #"(print \"[\")"
   #"(write #\\[)"
   #"(write \"[\")"
   #"(write \"1\")"
   #"(write 1)"
   #"(- (char->integer #\\5) (char->integer #\\0))"
   #"(char-numeric? #\\')"
   #"(char-numeric? #\\5)"
   #"(- 5)"
   #"(/ (* 5 6) 2)"
   #"(/ 6 2)"
   #"(/ 4 2)"
   #"d"
   #"a"
   #"(define-values (a d) (split-at '(1 2 3 4 5) 2))"
   #"(min +inf.f 5)"
   #"(max +inf.f 5)"
   #"infinity"
   #"inf"
   #"(max +float.inf 5)"
   #"(max +.inf 5)"
   #"(for/sum ([n '()]) n)"
   #"(hash-ref x (set 'b 'a))"
   #"x"
   #"(define x (hash (set 'a 'b) 3 (set 'b) 4))"
   #"(set 'a 'b)"
   #"(string-split \"foobar\" \"\")"
   #"(exact-round +inf.f)"
   #"(exact-floor +inf.f)"
   #"(exact-floor (min +inf.f 5))"
   #"(floor (min +inf.f 5))"
   #"(round (min +inf.f 5))"
   #"(min +inf.0 5)"
   #"(abs 4)"
   #"(abs -3)"
   #"(caddddr x)"
   #"(define x '(1 2 3 4 5 6 7 8))"
   #"'(1 2 3 4 5 6 7 8)"
   #"(read p)"
   #"p"
   #"(define p (open-input-file \"random.txt\"))"
   #"hello 5"
   #"(read (current-input-port))"
   #"(read)"
   #"(x '())"
   #"(x '(1))"
   #"(x '(1 2 3))"
   #"(define (x ls)\n    (for/sum ([prev ls]\n              [next (cdr ls)])\n      (if (> next prev) 1 0)))"
   #"(string? x)"
   #"185"
   #"(define x (read (current-input-port)))"
   #"(syntax->datum x)"
   #"(require syntax/stx)"
   #"(syntax-e x)"
   #"(define x #'(x y z))"
   #"(build-path base-path \"foo.js\")"
   #"base-path"
   #"(define-values (base-path _a _b) (split-path p))"
   #"(define-values (base-path _ _) (split-path p))"
   #"(split-path p)"
   #"(define p (path->complete-path p))"
   #"(define p (build-path \"random-linklet.rktl\"))"
   #"(build-path \"random-linklet.rktl\")"
   #"(raise 5)"
   #"(collection-file-path \"base.rkt\" \"racket\")"
   #"(resolve-module-path-index (cadar imps) path)"
   #"(collection-file-path \"racket/base\")"
   #"(get-module-path (lib \"racket/base\"))"
  ))
)
